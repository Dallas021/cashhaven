import pool from "../database/connection";
import { getVenomClient } from "../utils/wpp/config";

declare global {
    var success: any
}

async function allClient() {
    const query = "SELECT id, cpf, tel as telefone, name as nome FROM client";

    const [result] = await pool.query(query);

    return {
        success: true,
        message: result
    }
}

async function serachClient(uid: string) {
    const query = "SELECT id, name as nome, cpf, point as cashback FROM client WHERE cpf = ?";

    const [result]: [any[], any[]] = await pool.query(query, [uid]);

    if (result.length === 0) {
        return {
            success: true,
            message: ["N√£o existe cliente cadastrado com esse cpf"]
        }
    }

    return {
        success: true,
        message: result
    }
}

async function serachClientById(uid: string) {
    const query = "SELECT id, name as nome, cpf, point as cashback FROM client WHERE id = ?";

    const [result]: [any[], any[]] = await pool.query(query, [uid]);

    if (result.length === 0) {
        return {
            success: true,
            message: ["N√£o existe cliente cadastrado com esse cpf"]
        }
    }

    return {
        success: true,
        message: result
    }
}

async function updateClient(id: number, nome: string, telefone: string, cpf: string) {
    try {
        const query = "UPDATE client SET name = ?, tel = ?, cpf = ? WHERE id = ?";

        const [result] = await pool.query(query, [nome, telefone, cpf, id])

        return {
            success: true,
            message: ["Informa√ß√µes do cliente atualizadas com sucesso"]
        }
    } catch (error) {
        console.error(error)
        return {
            success: false,
            error: error
        }
    }
}

async function clientCreate(cpf: string, name: string, tel: string) {
    const query = "INSERT INTO client (cpf, name, tel, point) VALUES (?, ?, ?, 0)";
    let venomErrorStatus = null;

    try {
        const [result]: any = await pool.query(query, [cpf, name, tel]);

        const querySdmin = "SELECT value FROM sys WHERE id = 3";
        const [resultSdmin]: any = await pool.query(querySdmin);
        const sdmin = resultSdmin[0].value;

        if (result.affectedRows === 1) {
            const venomClient = getVenomClient();
            const tele = `55${tel}@c.us`; 
            const message = `
üåü Bem-vindo √† Toca do A√ßa√≠! üåü

Ficamos muito felizes em ter voc√™ como cliente. Aqui, al√©m de saborear o melhor a√ßa√≠ da regi√£o, voc√™ acumula *cashback* em todas as suas compras!

üí∞ Como funciona o Cashback?
A cada compra que voc√™ fizer, voc√™ vai acumular um saldo de cashback. Quando esse saldo atingir R$ ${sdmin} ou mais, voc√™ poder√° utiliz√°-lo como desconto nas suas pr√≥ximas compras!

üçß N√£o perca a oportunidade de aproveitar ainda mais nossos deliciosos a√ßa√≠s com descontos exclusivos.

Fique √† vontade para aproveitar todos os benef√≠cios e continue saboreando o melhor do a√ßa√≠! üòã
`;

            try {
                await venomClient.sendText(tele, message);
            } catch (error: any) {
                if (error.text === "The number does not exist") {
                    venomErrorStatus = "N√∫mero informado n√£o existe";
                } else {
                    venomErrorStatus = "Erro ao enviar mensagem pelo Venom";
                }
            }

            return {
                success: true,
                message: ["Cliente criado com sucesso"],
                venomStatus: venomErrorStatus
                    ? ["Aten√ß√£o: " + venomErrorStatus]
                    : ["Mensagem enviada com sucesso"],
            };
        } else {
            return {
                success: false,
                message: ["Erro ao criar cliente no banco de dados"],
            };
        }
    } catch (error: any) {
        if (error.code === "ER_DUP_ENTRY") {
            return {
                success: false,
                message: ["Cliente j√° cadastrado"],
            };
        }

        throw error;
    }
}

async function deleteClient(uid:number) {
    const deleteQuery = "DELETE FROM client WHERE id = ?";
    const [result] = await pool.query(deleteQuery, [uid]);

    return {
        success: true,
        message: ["Cliente exclu√≠do com sucesso"]
    }
}

export default {
    allClient,
    serachClient,
    updateClient,
    clientCreate,
    deleteClient,
    serachClientById
}